MEMORY {
  ZP:      start = $0, size = $100, type = rw;
  HEADER:  start = 0, size = $0010, type = ro, file = %O, fill=yes, fillval=$00;
  STACK:   start = $0100, size = $0100, type = rw;
  OAMRAM:  start = $0200, size = $0100, type = rw;
  RAM:     start = $0300, size = $0500, type = rw;
  CHR_8_0: start = $8000, size = $2000, type = ro, fill=yes;
  CHR_8_1: start = $8000, size = $2000, type = ro, fill=yes;
  CHR_8_2: start = $8000, size = $2000, type = ro, fill=yes;
  CHR_8_3: start = $8000, size = $2000, type = ro, fill=yes;
  ROM_8_4: start = $8000, size = $2000, type = ro, fill=yes;
  ROM_a_5: start = $a000, size = $5000, type = ro, fill=yes, file = %O;
  ROM_f_6: start = $f000, size = $1000, type = ro, fill=yes, file = %O;
}

SEGMENTS {
  INESHDR:  load = HEADER, type = ro;
  ZEROPAGE: load = ZP, type = zp;
  STACK:    load = STACK, type = bss, define = yes, optional = yes;
  OAMRAM:   load = OAMRAM, type = bss, define = yes, optional = yes;
  BSS:      load = RAM, type = bss, define = yes;
  CHRDATA0: load = CHR_8_0, type = ro;
  CHRDATA1: load = CHR_8_1, type = ro;
  CHRDATA2: load = CHR_8_2, type = ro;
  CHRDATA3: load = CHR_8_3, type = ro;
  LEVEL:    load = ROM_8_4, type = ro;
  CODE:     load = ROM_a_5, type = ro;
  BOOT:     load = ROM_f_6, type = ro, align=64;
  VECTORS:  load = ROM_f_6, type = ro, start = $FFFA;
}

FILES {
  %O: format = bin;
}

SYMBOLS {
  MAPPER_NUMBER: value = 28, type = export;
}
